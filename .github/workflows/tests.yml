# Run tests

name: Tests

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  tests:
    environment: dev
    runs-on: ubuntu-latest
    env:
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGHOST: ${{ vars.PGHOST }}
      PGPORT: ${{ vars.PGPORT }}
      PGDATABASE: ${{ vars.PGDATABASE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print working directory
        run: pwd

      - name: 'Create .env.dev file'
        run: |
          touch .env.dev
          echo PGUSER=${{ secrets.PGUSER }} >> .env.dev
          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env.dev
          echo PGHOST=${{ vars.PGHOST }} >> .env.dev
          echo PGPORT=${{ vars.PGPORT }} >> .env.dev
          echo PGDATABASE=${{ vars.PGDATABASE }} >> .env.dev
          ls -al  # Add this command to list files in the current directory
          cat .env.dev

      - name: Start services with Docker Compose
        id: start_services
        run: docker-compose -f docker-compose-dev.yml --env-file ./.env.dev up

      - name: Sleep for 1 minutes
        if: always()
        run: sleep 60s
        shell: bash

      - name: Log dev-app service output
        if: always()
        run: docker logs -f play_with_fastapi_dev-app_1

      - name: Log dev-processor service output
        if: always()
        run: docker logs -f play_with_fastapi_dev-processor_1

      - name: Show Docker network configuration
        if: always()
        run: docker network inspect bridge

      - name: Show DNS configuration
        if: always()
        run: cat /etc/resolv.conf
#
#      - name: Wait for container to be unhealthy  # New step to wait for the container to be unhealthy
#        run: |
#          until docker ps -f "status=unhealthy" --filter "name=play_with_fastapi_dev-app" --format '{{.Status}}' | grep -q 'unhealthy'; do
#            echo "Waiting for container to be unhealthy..."
#            sleep 10
#          done



#      - name: Wait for healthchecks
#        id: wait_for_healthchecks
#        if: always()
#        run: timeout 60s sh -c 'until docker ps | grep play_with_fastapi_dev-processor_1 | grep -q healthy; do echo "Waiting for container to be healthy..."; sleep 20; done'

      - name: List Docker containers
        if: always()
        run: docker ps -a

      - name: Run tests
        if: steps.start_services.outcome == 'success'
        run: docker-compose -f docker-compose-dev.yml exec play_with_fastapi-dev-app-1 pytest tests/

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose-dev.yml --env-file ./.env.dev down
