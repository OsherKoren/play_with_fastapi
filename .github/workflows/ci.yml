# This workflow will install Python dependencies, run tests with 3 versions of Python

name: FastApi application on Docker container. Test. Lint. Format.

on:
  push:
    branches: [ "dev", "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache-dependency-path: pyproject.toml

    - run: python -m pip install --upgrade pip

    - name: Install Poetry
      uses: abatilo/actions-poetry@v3

    - uses: actions/cache@v4
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}  # Modified caching key

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: poetry install --no-root


  quality:
    needs: install-dependencies
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache-dependency-path: pyproject.toml

    - run: python -m pip install --upgrade pip

    - name: Install Poetry
      uses: abatilo/actions-poetry@v3

    - uses: actions/cache@v4
      id: cache
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

    - name: Install dependencies
      run: poetry install # --no-root

    - name: Format code with Black
      run: poetry run black --check .

    - name: Run mypy
      run: poetry run mypy app_repo processor_repo

    - name: Run pylint
      run: |
       poetry run pylint $(git ls-files '*.py' | grep -v '/tests/')

  tests:
    needs: quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services with Docker Compose
        run: docker-compose -f docker-compose-dev.yml up -d

      - name: Wait for services to be healthy
        run: docker-compose -f docker-compose-dev.yml ps -q | xargs docker inspect --format='{{.State.Health.Status}}' | grep -q healthy

      - name: List Docker containers
        run: docker ps

      - name: Run tests
        run: docker-compose -f docker-compose-dev.yml exec play_with_fastapi-dev-app-1 pytest tests/
