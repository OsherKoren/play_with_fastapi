apiVersion: v1
data:
  __init__.py: |
    # !/usr/bin/env python

    """Initializes the src package."""

    from . import api, db, kafka, lifecycle, logger, main, mock_external
  lifecycle.py: |
    # !/usr/bin/env python

    """
    This module is responsible for creating the FastAPI application
    and performing startup and shutdown actions.
    """

    from contextlib import asynccontextmanager

    from fastapi import FastAPI
    from .db import connection as db_connection


    @asynccontextmanager
    async def lifespan(app: FastAPI):  # pylint: disable=unused-argument
        """
        Coroutine to manage the lifespan of the FastAPI application.

        This coroutine sets up the database and Kafka, yields to the application,
        and then tears down the Kafka and database on application shutdown.

        Args:
            app (FastAPI): The FastAPI application.

        Yields:
            None

        Raises:
            Any exceptions raised during the setup, application execution, or teardown phases.
        """
        await db_connection.start_database()
        try:
            yield
        finally:
            await db_connection.shutdown_database()
  logger.py: |
    # !/usr/bin/env python

    """Log configuration."""
    import logging

    log = logging.getLogger(__name__)
    log.setLevel(logging.DEBUG)

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)

    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")

    ch.setFormatter(formatter)
    log.addHandler(ch)
  main.py: |
    # !/usr/bin/env python

    """
    This module is responsible for creating the FastAPI application
    and performing startup and shutdown actions.
    """

    from fastapi import FastAPI
    from src.api import messages
    from src.lifecycle import lifespan

    app = FastAPI(title="Message Gateway App", version="1.0", lifespan=lifespan)

    app.include_router(messages.health_router, prefix="/api/v1", tags=["health"])
    app.include_router(messages.router, prefix="/api/v1", tags=["messages"])
  py.typed: ""
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: app
  name: app-cm0
