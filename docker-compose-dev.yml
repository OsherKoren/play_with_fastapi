version: '3.9'

services:
  dev-db:
    image: postgres:alpine
    volumes:
      - ./setup_db:/docker-entrypoint-initdb.d
      - postgres_data_dev:/var/lib/postgresql/data
    environment:
      PGUSER: ${PGUSER:-postgres}
      PGPASSWORD: ${PGPASSWORD:-}
      PGHOST: ${PGHOST:-dev-db}
      PGPORT: ${PGPORT:-5432}
      PGDATABASE: ${PGDATABASE:-postgres}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${PGUSER} -d ${PGDATABASE} -c 'SELECT 1 FROM accounts LIMIT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  dev-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  dev-kafka:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      - dev-zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: dev-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://dev-kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: /tmp/kafka-logs-dev
      DEV_ENV: "true"
    healthcheck:
      test: [ "CMD", "nc", "-zv","dev-kafka", "29092" ]
      interval: 30s
      timeout: 10s
      retries: 3

  dev-app:
    build:
      context: .
      dockerfile: app_repo/Dockerfile.dev
    volumes:
      - ./:/app
#      - ./app_repo/app:/app
    ports:
      - "8000:8000"
    depends_on:
      dev-db:
        condition: service_healthy
      dev-kafka:
        condition: service_healthy
    environment:
      PGUSER: ${PGUSER:-postgres}
      PGPASSWORD: ${PGPASSWORD:-}
      PGHOST: ${PGHOST:-dev-db}
      PGPORT: ${PGPORT:-5432}
      PGDATABASE: ${PGDATABASE:-postgres}
      DEV_ENV: "true"
    healthcheck:
      test: ["CMD", "python", "-c",
             "import urllib.request; urllib.request.urlopen('http://dev-app:8000/api/v1/health').read().decode()"]
      interval: 30s
      timeout: 30s
      retries: 3

  dev-processor:
    build:
      context: .
      dockerfile: processor_repo/Dockerfile.dev
    depends_on:
      dev-kafka:
        condition: service_healthy
      dev-app:
        condition: service_healthy
    environment:
      PGUSER: ${PGUSER:-postgres}
      PGPASSWORD: ${PGPASSWORD:-}
      PGHOST: ${PGHOST:-dev-db}
      PGPORT: ${PGPORT:-5432}
      PGDATABASE: ${PGDATABASE:-postgres}
      DEV_ENV: "true"

volumes:
  postgres_data_dev:
