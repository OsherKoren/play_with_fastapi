version: '3.8'

services:
  dev-db:
    image: postgres:alpine
    volumes:
      - ./setup_db:/docker-entrypoint-initdb.d
      - postgres_data_dev:/var/lib/postgresql/data
    env_file:
      - .env.dev
    environment:
      POSTGRES_USER: ${PS_USER:-postgres}
      POSTGRES_PASSWORD: ${PS_PASSWORD:-}
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_HOST: ${PS_HOST:-localhost}
      POSTGRES_PORT: ${PS_PORT:-5432}
    ports:
      - "${PS_PORT}:${PS_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres -d ${DB_NAME} -c 'SELECT 1 FROM accounts LIMIT 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

  dev-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  dev-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - dev-zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: dev-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      #test: ["CMD", "nc", "-zv", "kafka", "9092"]
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "kafka:9092" ]
      interval: 30s
      timeout: 10s
      retries: 3

  dev-app:
    build:
      context: app
      dockerfile: Dockerfile.dev
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"
    depends_on:
      dev-db:
        condition: service_healthy
      dev-kafka:
        condition: service_healthy
    env_file:
      - .env.dev
    environment:
      DB_NAME: ${DB_NAME}
    healthcheck:
      test: ["CMD", "python", "-c",
             "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v1/health').read().decode()"]
      interval: 30s
      timeout: 10s
      retries: 3

  dev_kafka-consumer:
    build:
      context: ./kafka_consumer
      dockerfile: Dockerfile.dev
    depends_on:
      dev-kafka:
        condition: service_healthy
      dev-app:
        condition: service_healthy

volumes:
  postgres_data_dev: