apiVersion: v1
kind: ConfigMap

metadata:
  name: {{ .Values.initdbScriptsConfigMap }}
  namespace: {{ .Values.namespace | default "msg-preds" }}
  labels:
    app: {{ .Values.initdbScriptsConfigMap }}

data:
  db-init.sql: |
    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1
            FROM pg_roles
            WHERE rolname = '{{ .Values.env.POSTGRES_USER.secretKey }}'
        ) THEN
            CREATE ROLE "{{ .Values.env.POSTGRES_USER.secretKey }}"
            WITH LOGIN
            PASSWORD '{{ .Values.env.POSTGRES_PASSWORD.secretKey }}';
            RAISE NOTICE 'Role {{ .Values.env.POSTGRES_USER.secretKey }} created successfully';
        ELSE
            RAISE NOTICE 'Role {{ .Values.env.POSTGRES_USER.secretKey }} already exists';
        END IF;
    END $$;

    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1
            FROM pg_database
            WHERE datname = '{{ .Values.env.POSTGRES_DB }}'
        ) THEN
            EXECUTE 'CREATE DATABASE "{{ .Values.env.POSTGRES_DB }}"';
            RAISE NOTICE 'Database {{ .Values.env.POSTGRES_DB }} created successfully';
        ELSE
            RAISE NOTICE 'Database {{ .Values.env.POSTGRES_DB }} already exists';
        END IF;
    END $$;

    CREATE TABLE IF NOT EXISTS accounts (
        account_id SERIAL PRIMARY KEY,
        first_name VARCHAR(20),
        surname VARCHAR(20),
        email VARCHAR(50),
        phone VARCHAR(15),
        birthday TIMESTAMP,
        gender VARCHAR(10)
    );
    CREATE TABLE IF NOT EXISTS messages (
        message_id SERIAL PRIMARY KEY,
        account_id INTEGER REFERENCES accounts(account_id),
        message VARCHAR(500),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    CREATE TABLE IF NOT EXISTS messages_predictions (
        prediction_id SERIAL PRIMARY KEY,
        message_id INTEGER REFERENCES messages(message_id) UNIQUE,
        score FLOAT,
        predicted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1 FROM accounts LIMIT 1
        )
        THEN
            INSERT INTO accounts (first_name, surname, email, phone, birthday, gender)
            VALUES
                ('Alice', 'Smith', 'alice.smith@example.com', '001456789000', '1992-03-15', 'Female'),
                ('Bob', 'Johnson', 'bob.johnson@example.com', '972765432101', '1988-07-22', 'Male'),
                ('Charlie', 'Brown', 'charlie.brown@example.com', '001233445588', '1990-05-30', 'Male'),
                ('Diana', 'Williams', 'diana.williams@example.com', '972528877665', '1995-01-10', 'Female'),
                ('Ethan', 'Davis', 'ethan.davis@example.com', '972535432105', '1989-11-05', 'Male');
            RAISE NOTICE 'Accounts inserted successfully.';
        ELSE
            RAISE NOTICE 'Accounts table already contains data. No need to insert.';
        END IF;
    END $$;
